import java.util.jar.JarFile
import java.nio.file.Files
import org.gradle.api.artifacts.transform.TransformParameters

def artifactType = Attribute.of("artifactType", String)
def renamedForMixinFmlAgent = Attribute.of("renamedForMixinFmlAgent", Boolean)

dependencies {
	attributesSchema.attribute(renamedForMixinFmlAgent)
	artifactTypes.getByName("jar") {
		attributes.attribute(renamedForMixinFmlAgent, false)
	}
}

configurations.configureEach {
	if(canBeResolved) {
		attributes.attribute(renamedForMixinFmlAgent, true)
	}
}

dependencies {
	registerTransform(RenameForMixinFmlAgent) {
		from.attribute(renamedForMixinFmlAgent, false).attribute(artifactType, "jar")
		to.attribute(renamedForMixinFmlAgent, true).attribute(artifactType, "jar")
	}
}

@CacheableTransform
abstract class RenameForMixinFmlAgent implements TransformAction<TransformParameters.None> {

	@PathSensitive(PathSensitivity.NAME_ONLY)
	@InputArtifact
	abstract Provider<FileSystemLocation> getInputArtifact()

	@Override
	void transform(TransformOutputs outputs) {
		def inputFile = inputArtifact.get().asFile
		def inputJar = new JarFile(inputFile)
		def attr = inputJar.manifest?.mainAttributes
		if("true".equalsIgnoreCase(attr?.getValue("ForceLoadAsMod")) && attr?.getValue("FMLCorePluginContainsFMLMod")) {
			println "Renaming ${inputFile.name}"
			def baseName = inputFile.name.substring(0, inputFile.name.length()-4)
			def renamedFile = outputs.file("${baseName}-deobfedDeps.jar")
			Files.copy(inputFile.toPath(), renamedFile.toPath())
		}
		else {
			outputs.file(inputArtifact)
		}
	}
}
